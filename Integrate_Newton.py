import numpy as np
import SLE

a = 1.8
b = 2.3

x1 = a
x2 = (a + b) / 2
x3 = b
# p(x) = 1 / ((x - a)^alpha * (x - b)^beta))


f1 = lambda x: 2.5 * ((-2.3 + x)**2)**0.2
nu0 = f1(b) - f1(a)

#f2 = lambda x: 0.714286 * (((-2.3 + x)**2)**0.2) * (5.75 + x)
f2 = lambda x: ((((x - 2.3)**2)**0.2)*(357142857142857142857142857142866.0*x + 2.0535714285714285714285714285714e33))/500000000000000000000000000000000

nu1 = f2(b) - f2(a)

#f3 = lambda x: 0.416667 * (((-2.3 + x)**2)**0.2) * (18.8929 + 3.28571 * x + x**2)
f3 = lambda x: 13.225*(((x - 2.3)**2)**0.2) + 3.2857142857142857142857142857143*(((x - 2.3)**7)**0.2) + 0.41666666666666666666666666666667*(((x - 2.3)**12)**0.2)

nu2 = f3(b) - f3(a)

mat = np.array([[1, 1, 1],
            [x1, x2, x3],
            [x1**2, x2**2, x3**2]])

b = np.array([[nu0], [nu1], [nu2]])
A = SLE.solve_lin_eq(mat, b)

func = lambda x: 3.7 * np.cos(1.5 * x) * np.exp( - 4 * x / 3) + 2.4 * np.sin(4.5 * x) * np.exp(2 * x / 3) + 4
integral = A[0, 0]*func(x1) + A[1, 0]*func(x2) + A[2, 0]*func(x3)

print integral

a = 1.8
b = 2.3

matlab_integral = lambda x: 10. *(((x - 2.3)**2)**0.2) - 0.91862068965517241379310344827586*np.exp(-1.3333333333333333333333333333333*x)*(1.3333333333333333333333333333333*np.cos(1.5*x) - 1.5*np.sin(1.5*x)) - 0.11597315436241610738255033557047*np.exp(0.66666666666666666666666666666667*x)*(4.5*np.cos(4.5*x) - 0.66666666666666666666666666666667*np.sin(4.5*x))


print matlab_integral(b) - matlab_integral(a)




# a = 1.8
# b = 2.3
# alpha = 0
# beta = 3 / 5
# integrate: (f(x)/((x - a)^alpha * (x - b)^beta)) dx from a to b

